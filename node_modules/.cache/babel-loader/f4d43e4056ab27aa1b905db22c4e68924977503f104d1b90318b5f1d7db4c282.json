{"ast":null,"code":"/**\n * CookieUtil常用的一些工具类\n */\n\nexport function setCookie(name, value, days) {\n  var date = new Date();\n  date.setDate(date.getDate() + days);\n  document.cookie = name + '=' + value + ';expires=' + date;\n\n  // var domain, domainParts, date, expires, host;\n  //\n  // if (days)\n  // {\n  //   date = new Date();\n  //   date.setTime(date.getTime()+(days*24*60*60*1000));\n  //   expires = \"; expires=\"+date.toGMTString();\n  // }\n  // else\n  // {\n  //   expires = \"\";\n  // }\n  //\n  // host = location.host;\n  // if (host.split('.').length === 1)\n  // {\n  //   // no \".\" in a domain - it's localhost or something similar\n  //   document.cookie = name+\"=\"+value+expires+\"; path=/\";\n  // }\n  // else\n  // {\n  //   // Remember the cookie on all subdomains.\n  //   //\n  //   // Start with trying to set cookie to the top domain.\n  //   // (example: if user is on foo.com, try to set\n  //   //  cookie to domain \".com\")\n  //   //\n  //   // If the cookie will not be set, it means \".com\"\n  //   // is a top level domain and we need to\n  //   // set the cookie to \".foo.com\"\n  //\n  //   domainParts = host.split('.');\n  //   domainParts.shift();\n  //   domain = '.'+domainParts.join('.');\n  //\n  //   document.cookie = name+\"=\"+value+expires+\"; path=/; domain=\"+domain;\n  //\n  //   // check if cookie was successfuly set to the given domain\n  //   // (otherwise it was a Top-Level Domain)\n  //   if (getCookie(name) == null || getCookie(name) != value)\n  //   {\n  //     // append \".\" to current domain\n  //     domain = '.'+host;\n  //     document.cookie = name+\"=\"+value+expires+\"; path=/; domain=\"+domain;\n  //   }\n  // }\n}\n\nexport function getCookie(name) {\n  var arr,\n    reg = new RegExp(\"(^| )\" + name + \"=([^;]*)(;|$)\");\n  if (arr = document.cookie.match(reg)) return unescape(arr[2]);else return null;\n}\nexport function delCookie(name) {\n  var exp = new Date();\n  exp.setTime(exp.getTime() - 1);\n  var cval = getCookie(name);\n  if (cval != null) document.cookie = name + \"=\" + cval + \";expires=\" + exp.toGMTString();\n}","map":{"version":3,"names":["setCookie","name","value","days","date","Date","setDate","getDate","document","cookie","getCookie","arr","reg","RegExp","match","unescape","delCookie","exp","setTime","getTime","cval","toGMTString"],"sources":["D:/code/blog/blog_web/src/utils/cookieUtils.js"],"sourcesContent":["/**\n * CookieUtil常用的一些工具类\n */\n\nexport function setCookie(name, value, days) {\n\n  var date=new Date();\n  date.setDate(date.getDate()+days);\n  document.cookie=name+'='+value+';expires='+date;\n\n  // var domain, domainParts, date, expires, host;\n  //\n  // if (days)\n  // {\n  //   date = new Date();\n  //   date.setTime(date.getTime()+(days*24*60*60*1000));\n  //   expires = \"; expires=\"+date.toGMTString();\n  // }\n  // else\n  // {\n  //   expires = \"\";\n  // }\n  //\n  // host = location.host;\n  // if (host.split('.').length === 1)\n  // {\n  //   // no \".\" in a domain - it's localhost or something similar\n  //   document.cookie = name+\"=\"+value+expires+\"; path=/\";\n  // }\n  // else\n  // {\n  //   // Remember the cookie on all subdomains.\n  //   //\n  //   // Start with trying to set cookie to the top domain.\n  //   // (example: if user is on foo.com, try to set\n  //   //  cookie to domain \".com\")\n  //   //\n  //   // If the cookie will not be set, it means \".com\"\n  //   // is a top level domain and we need to\n  //   // set the cookie to \".foo.com\"\n  //\n  //   domainParts = host.split('.');\n  //   domainParts.shift();\n  //   domain = '.'+domainParts.join('.');\n  //\n  //   document.cookie = name+\"=\"+value+expires+\"; path=/; domain=\"+domain;\n  //\n  //   // check if cookie was successfuly set to the given domain\n  //   // (otherwise it was a Top-Level Domain)\n  //   if (getCookie(name) == null || getCookie(name) != value)\n  //   {\n  //     // append \".\" to current domain\n  //     domain = '.'+host;\n  //     document.cookie = name+\"=\"+value+expires+\"; path=/; domain=\"+domain;\n  //   }\n  // }\n}\n\nexport function getCookie(name) {\n  var arr, reg = new RegExp(\"(^| )\" + name + \"=([^;]*)(;|$)\")\n  if (arr = document.cookie.match(reg))\n    return unescape(arr[2])\n  else\n    return null\n}\n\nexport function delCookie(name) {\n  var exp = new Date();\n  exp.setTime(exp.getTime() - 1);\n  var cval = getCookie(name);\n  if (cval != null)\n    document.cookie = name + \"=\" + cval + \";expires=\" + exp.toGMTString();\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,SAASA,SAASA,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAE3C,IAAIC,IAAI,GAAC,IAAIC,IAAI,EAAE;EACnBD,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,EAAE,GAACJ,IAAI,CAAC;EACjCK,QAAQ,CAACC,MAAM,GAACR,IAAI,GAAC,GAAG,GAACC,KAAK,GAAC,WAAW,GAACE,IAAI;;EAE/C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;;AAEA,OAAO,SAASM,SAASA,CAACT,IAAI,EAAE;EAC9B,IAAIU,GAAG;IAAEC,GAAG,GAAG,IAAIC,MAAM,CAAC,OAAO,GAAGZ,IAAI,GAAG,eAAe,CAAC;EAC3D,IAAIU,GAAG,GAAGH,QAAQ,CAACC,MAAM,CAACK,KAAK,CAACF,GAAG,CAAC,EAClC,OAAOG,QAAQ,CAACJ,GAAG,CAAC,CAAC,CAAC,CAAC,MAEvB,OAAO,IAAI;AACf;AAEA,OAAO,SAASK,SAASA,CAACf,IAAI,EAAE;EAC9B,IAAIgB,GAAG,GAAG,IAAIZ,IAAI,EAAE;EACpBY,GAAG,CAACC,OAAO,CAACD,GAAG,CAACE,OAAO,EAAE,GAAG,CAAC,CAAC;EAC9B,IAAIC,IAAI,GAAGV,SAAS,CAACT,IAAI,CAAC;EAC1B,IAAImB,IAAI,IAAI,IAAI,EACdZ,QAAQ,CAACC,MAAM,GAAGR,IAAI,GAAG,GAAG,GAAGmB,IAAI,GAAG,WAAW,GAAGH,GAAG,CAACI,WAAW,EAAE;AACzE"},"metadata":{},"sourceType":"module","externalDependencies":[]}